name: CI CD Pipeline

# Only run the CI/CD pipeline on the main branch
# This is to prevent the pipeline from running on every branch
# and only run when the main branch is updated
# If development branches are used, the pipeline can be updated to include them
on:
  push:
    branches:
      - master

# Environment variables for postgres database
env:
  PG_DATABASE: test
  PG_USER: postgres
  PG_PASSWORD: postgres
  DATABASE_URL: postgres://postgres:postgres@localhost:5432/test

jobs:
  # This steps runs eslint and tests the code
  # using jest and cypress
  validate-test:
    runs-on: ubuntu-latest

    services:
      # Start postgres database
      postgres:
        # Docker Hub image
        image: postgres:15
        # Provide the password for postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

        # Use pnpm
      - name: Setup pnpm
        uses: pnpm/action-setup@v3 # docs https://pnpm.io/continuous-integration#github-actions
        with:
          version: 8

        # Install dependencies
      - name: Install
        run: |
          pnpm install

      - name: Run DB Migrations
        run: |
          pnpm exec prisma generate && 
          pnpm exec prisma migrate reset

      - name: Build Next Project and Start Server
        run: |
          pnpm exec next build && PORT=3000 pnpm exec next start &
          sleep 5

          # Test the application
      - name: Run Unit Tests
        run: pnpm test
